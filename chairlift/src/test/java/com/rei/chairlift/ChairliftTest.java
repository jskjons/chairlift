package com.rei.chairlift;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;
import java.util.function.Predicate;

import org.junit.Test;

import com.google.common.collect.ImmutableMap;

public class ChairliftTest extends BaseTemplateTest {
    ChairliftConfig globalConfig = new ChairliftConfig(false, false, ImmutableMap.of());
    Chairlift chairlift = new Chairlift(globalConfig);
    
    @Test
    public void testFilters() {
        TemplateConfig config = new TemplateConfig(globalConfig);
        config.getIncludedFiles().add("**/*");
        config.getExcludedFiles().add("**/exclude");
        
        assertTrue(allMatch(chairlift.getCopyFilters(config), Paths.get("/README.md")));
        assertTrue(allMatch(chairlift.getCopyFilters(config), Paths.get("/foo/bar")));
        assertFalse(allMatch(chairlift.getCopyFilters(config), Paths.get("/foo/exclude")));
        
        config.getProcessedFiles().add("**/*");
        config.getUnprocessedFiles().add("some-folder/BLAH");
        
        assertTrue(allMatch(chairlift.getProcessFilters(config), Paths.get("/README.md")));
        assertTrue(allMatch(chairlift.getProcessFilters(config), Paths.get("/foo/bar")));
        assertFalse(allMatch(chairlift.getProcessFilters(config), Paths.get("/some-folder/BLAH")));
    }
    
    @Test
    public void canGenerateProject() throws Exception {
        Path projectFolder = tmp.newFolder("project").toPath();
        
        String readme = chairlift.generate(getTestTemplateArtifact(), projectFolder);
        
        printDir(projectFolder);
        
        System.out.println(readme);
        assertEquals("Welcome to project my-app! Generated by chairlift-test v1", readme);
        
        assertTrue(Files.exists(projectFolder.resolve("my-app/MyApp.java")));
        assertTrue(Files.exists(projectFolder.resolve("generated-afterwards")));
        assertTrue(Files.isDirectory(projectFolder.resolve("empty")));
        assertFalse(Files.exists(projectFolder.resolve("empty/.retain")));
    }
    
    @Test
    public void canGenerateSubTemplate() throws Exception {
        Path projectFolder = tmp.newFolder("project").toPath();
        
        chairlift.generate(getTestTemplateArtifact(), "entity", projectFolder);
        
        printDir(projectFolder);
        
        assertTrue(Files.exists(projectFolder.resolve("com/rei/test/domain/Entity.java")));
        assertTrue(Files.exists(projectFolder.resolve("com/rei/test/persistence/EntityRepository.java")));
    }
    
    private void printDir(Path dir) throws IOException {
        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                System.out.println(file);
                return FileVisitResult.CONTINUE;
            }
        });
    }

    private boolean allMatch(List<Predicate<Path>> copyFilters, Path file) {
        return copyFilters.stream().allMatch(p -> p.test(file));
    }
}
